import java.util.Stack;

class Solution {

	public static void main(String args[]) {
		int[][] board = { { 0, 0, 0, 0, 0 }, { 0, 0, 1, 0, 3 }, { 0, 2, 5, 0, 1 }, { 4, 2, 4, 4, 2 },
				{ 3, 5, 1, 3, 1 } };

		int[] moves = { 1, 5, 3, 5, 1, 2, 1, 4 };
		
		int result = solution(board, moves);
		
		System.out.println(result);
	}

	public static int solution(int[][] board, int[] moves) {
		int answer = 0;
		
		Stack<Integer> basket = new Stack<>();
		int len = board.length;
		
		for (int i = 0; i < moves.length; i++) {
			int pos = moves[i]-1;
			int doll = 0;
			for (int j = 0; j < len; j++) {
				if(board[j][pos] != 0) {
					doll = board[j][pos];
					board[j][pos] = 0;
					break;
				}
			}
			if(doll != 0) {
				if(basket.isEmpty()) {
					basket.add(doll);
				}else {
					if( doll == basket.peek() ) {
						answer += 2;
						basket.pop();
					}else {
						basket.add(doll);
					}
				}	
			}
		}
		return answer;
	}

	private static void print(int[][] board) {
		for (int i = 0; i < board.length; i++) {
			for (int j = 0; j < board.length; j++) {
				System.out.print(board[i][j]+" ");
			}
			System.out.println();
		}
		System.out.println();
	}
}