import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;

class Solution {
	static int T;
	static int N;
	static int M;

	static int[][] Arr;
	static boolean[] visited;
	static int group;
	
	static Queue<Integer> queue;

	public static void main(String args[]) throws Exception {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = null;

		T = Integer.parseInt(br.readLine());

		for (int t_case = 1; t_case <= T; t_case++) {
			st = new StringTokenizer(br.readLine());

			N = Integer.parseInt(st.nextToken());
			M = Integer.parseInt(st.nextToken());

			// 1번부터 N번 사람까지 번호가 붙어 있다고 가정한다.
			Arr = new int[N + 1][N + 1];
			visited = new boolean[N + 1];
			group = 0;
			
			int first, second = 0;
			for (int i = 0; i < M; i++) {
				st = new StringTokenizer(br.readLine());
				first = Integer.parseInt(st.nextToken());
				second = Integer.parseInt(st.nextToken());

				Arr[first][second] = Arr[second][first] = 1;
			}
			
			for (int i = 1; i <= N; i++) {
				if (!visited[i]) {
					bfs(i);
					group++;
				}
			}

			System.out.println("#" + t_case + " " + group);
			
		}
	}

	private static void bfs(int i) {
		queue = new LinkedList<Integer>();
		
		queue.add(i);
		visited[i] = true;
		
		while(!queue.isEmpty()) {
			int person = queue.poll();
			
			for (int j = 1; j < N+1; j++) {
				if(Arr[person][j] == 1 && !visited[j]) {
					visited[j] = true;
					queue.add(j);
				}
			}
		}
	}

}