import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.PriorityQueue;
import java.util.Queue;
import java.util.StringTokenizer;

public class Main {
	static int N, M, K;
	static int[][] map, A;
	static PriorityQueue<Namu> Na;
	static Queue<Namu> dead;
	// 인접 8칸에 대한 행렬(상, 상우, 우, 하우, 하, 하좌, 좌, 상좌)
	static int[] dy = { -1, -1, 0, 1, 1, 1, 0, -1 };
	static int[] dx = { 0, 1, 1, 1, 0, -1, -1, -1 };
	
	public static void main(String args[]) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = null;
		st = new StringTokenizer(br.readLine());
		N = Integer.parseInt(st.nextToken());
		M = Integer.parseInt(st.nextToken());
		K = Integer.parseInt(st.nextToken());
		map = new int[N][N];
		A = new int[N][N];
		
		for (int i = 0; i < N; i++) {
			st = new StringTokenizer(br.readLine());
			for (int j = 0; j < N; j++) {
				A[i][j] = Integer.parseInt(st.nextToken());
			}
		}
		
		Na = new PriorityQueue<>();
		dead = new LinkedList<>();
		for (int i = 0; i < M; i++) {
			st = new StringTokenizer(br.readLine());
			Na.add(new Namu(Integer.parseInt(st.nextToken()) - 1, Integer.parseInt(st.nextToken()) - 1,
					Integer.parseInt(st.nextToken())));
		}
		// 1. 초기화 작업 시작
		init();
		
		
		// 2. K년 동안 4개의 계절이 반복된다.
		for (int i = 0; i < K; i++) {
			// 문제점 : 시간초과
			spring();
			summer();
			autumn();
			winter();
		}
		// 4. K년 후, 상도의 땅에 살아 있는 나무의 개수
		System.out.println(Na.size());
	}
	
	
	static void winter() {
		for (int i = 0; i < N; i++) {
			for (int j = 0; j < N; j++) {
				map[i][j] += A[i][j];
			}
		}
	}
	static void autumn() {
		//int ntree = Na.size();
		Queue<Namu> q = new LinkedList<>();
		//for (int i = 0; i < ntree; i++) {
		while(!Na.isEmpty()) {
			Namu n = Na.poll();
			// 1. 나무의 나이가 5의 배수이면 번식을 한다.
			if (n.age % 5 == 0) {
				for (int j = 0; j < 8; j++) {
					if (n.r + dy[j] >= 0 && n.r + dy[j] < N && n.c + dx[j] >= 0 && n.c + dx[j] < N) {
						q.add(new Namu(n.r + dy[j], n.c + dx[j], 1));
					}
				}
			}
			q.add(n);
		}
		
		while(!q.isEmpty()) {
			Na.add(q.poll());
		}
	}
	static void summer() {
		// 1. 봄에 죽은 나무가 양분으로 변한다.
		while (!dead.isEmpty()) {
			Namu n = dead.poll();
			map[n.r][n.c] += (n.age / 2);
			//Na.remove(n);
		}
	}
	static void spring() {
		//int ntree = Na.size();
		//PriorityQueue<Namu> pq = new PriorityQueue<>();
		Queue<Namu> q = new LinkedList<>();
		//for (int i = 0; i <=ntree; i--) {
		while(!Na.isEmpty()) {
			Namu n = Na.poll();
			// 1. 나무의 위치(양분)이 나무의 나이보다 많은 경우, 자신의 나이만큼 양분을 먹고 나이가 1씩 증가한다.
			if (map[n.r][n.c] - n.age >= 0) {
				map[n.r][n.c] -= n.age;
				//Na.get(i).age++;
				q.add(new Namu(n.r, n.c,n.age+1));
			} else { // 2. 땅에 양분이 부족해 양분을 먹지 못하는 나무는 바로 죽음.
				// 3. 죽은 나무는 따로 저장공간에 저장한다.
				dead.add(n);
			}
		}
		
		while(!q.isEmpty()) {
			Na.add(q.poll());
		}
		
	}
	static void init() {
		// 땅에는 기본적으로 5의 양분이 있다.
		for (int i = 0; i < N; i++) {
			for (int j = 0; j < N; j++) {
				map[i][j] = 5;
			}
		}
	}
	static class Namu implements Comparable<Namu> {
		int r;
		int c;
		int age;
		public Namu(int r, int c, int a) {
			this.r = r;
			this.c = c;
			this.age = a;
		}
		@Override
		public int compareTo(Namu o) {
			return this.age-o.age;
		}
	}
}